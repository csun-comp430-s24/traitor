trait Addable {
    method add(other: Self): Self;
}

trait Printable {
    method print(): Void;
}

struct IntWrapper {
    value: Int
}

impl Addable for Int {
    method add(other: Int): Int {
        return self + other;
    }
}

impl Addable for IntWrapper {
    method add(other: IntWrapper): IntWrapper {
        return new IntWrapper { value: self.value + other.value };
    }
}

impl Printable for Int {
    method print(): Void {
        println(self);
    }
}

impl Printable for IntWrapper {
    method print(): Void {
        println(self);
    }
}

func mult (x : Int, y : Int) : Int { 
    return x * y; 
}

let a1: Int = 5;
let a2: IntWrapper = new IntWrapper { value: 7 };
let a3: Int = a1.add(2);
let a4: IntWrapper = a2.add(new IntWrapper { value: 3 });
let a5: Boolean = true;
a3.print();
1 + 2;
return 3;
if ( a5 == true ) a5 = false;
a1 < a3;
a2 != a4;